apply plugin: "groovy"
apply plugin: "maven-publish"
apply from: 'deps.gradle'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        //Check for the latest version here: http://plugins.gradle.org/plugin/com.jfrog.artifactory
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4+"
    }
}

allprojects {
    apply plugin: "com.jfrog.artifactory"
}


task getDeps(type:Copy) {
    from configurations.compile
    into 'compile/'
}

artifactory {
    contextUrl = "${artifactory_contextUrl}"   //The base Artifactory URL if not overridden by the publisher/resolver
    publish {
        repository {
            repoKey = 'libs-snapshot-local'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
        defaults {
            //publishIvy & publishPom are true by default
            publishArtifacts = true
            publications('source')
            publishBuildInfo = true
        }
    }
    resolve {
        repository {
            repoKey = 'libs-snapshot'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
    }
}

publishing {
    publications {
        source(MavenPublication) {
            artifact project.file("src/D.c")
            groupId "${group}"
            artifactId "${repoName}"
            version "${version}-SNAPSHOT"
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', getResolvedVersionOf(it.name))
                }
            }
        }
    }
}